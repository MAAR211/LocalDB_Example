// <auto-generated />
using System;
using Database_Example_3.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database_Example_3.Migrations
{
    [DbContext(typeof(Hrrav3GeNextPreprodContext))]
    [Migration("20230331084602_LocalPreprodMigration")]
    partial class LocalPreprodMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Database_Example_3.Models.Account", b =>
                {
                    b.Property<long>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AccountId"));

                    b.Property<int>("AccountStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("AvailableAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("CreditLimit")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("VatstatusId")
                        .HasColumnType("int")
                        .HasColumnName("VATStatusId");

                    b.HasKey("AccountId")
                        .HasName("PK_billing_Account");

                    b.ToTable("Account", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.AccountStatus", b =>
                {
                    b.Property<int>("AccountStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AccountStatusId")
                        .HasName("PK_billing_AccountStatus");

                    b.ToTable("AccountStatus", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.Action", b =>
                {
                    b.Property<long>("ActionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ActionId"));

                    b.Property<string>("ActionName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<long>("SourceUserId")
                        .HasColumnType("bigint");

                    b.HasKey("ActionId")
                        .HasName("PK_audit_Action");

                    b.ToTable("Action", "audit");
                });

            modelBuilder.Entity("Database_Example_3.Models.Admin", b =>
                {
                    b.Property<long>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdminId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("FullName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("lastChangeUserId");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneExtension")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Position")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("AdminId")
                        .HasName("PK_client_Admin");

                    b.ToTable("Admin", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.Announcement", b =>
                {
                    b.Property<long>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementId"));

                    b.Property<int?>("AnnouncementListingSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("AnnouncementModuleId")
                        .HasColumnType("int");

                    b.Property<int>("AnnouncementStatusId")
                        .HasColumnType("int");

                    b.Property<int>("AnnouncementTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ApplicationMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("BaubleTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("Bonus")
                        .HasColumnType("int");

                    b.Property<long?>("ContactCustomerAgentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("CustomerName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CustomerName2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description2PlainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionPlainText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DurationFrom")
                        .HasColumnType("int");

                    b.Property<int?>("DurationTo")
                        .HasColumnType("int");

                    b.Property<int?>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("EmploymentFormId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("FrameTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("HideContactPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("HideLocationExceptCity")
                        .HasColumnType("bit");

                    b.Property<bool?>("HideSalary")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<long>("InsertUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEventSpecific")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFacebookShareOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstagramShareOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLinkedInShareOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMatchingEligible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMatchingReady")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPriority")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuitableForStudent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTravelRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithBonus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithFrame")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithLogo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithNewYearBauble")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithNewYearDecoration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorkFromHome")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LastRenewalId")
                        .HasColumnType("bigint");

                    b.Property<int?>("NewYearDecorationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PriorityUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<int>("PublishStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("SalaryFrom")
                        .HasColumnType("int");

                    b.Property<int?>("SalaryTo")
                        .HasColumnType("int");

                    b.Property<int?>("TargetAudienceId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Title2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("WorkExperienceFrom")
                        .HasColumnType("int");

                    b.Property<int?>("WorkExperienceTo")
                        .HasColumnType("int");

                    b.Property<int?>("WorkExperienceType")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementId")
                        .HasName("PK_posting_Announcement");

                    b.HasIndex(new[] { "CustomerId" }, "IX_posting.Announcement_CustomerId");

                    b.ToTable("Announcement", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementApplicationDetail", b =>
                {
                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<string>("ApplicationAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ApplicationUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<bool?>("ForwardApplicationsToEmail")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsEmailSameAsContactPerson")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPhoneSameAsContactPerson")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RecipientCustomerAgentId")
                        .HasColumnType("bit");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("AnnouncementId")
                        .HasName("PK_posting_Announcement_ApplicationDetail");

                    b.ToTable("Announcement_ApplicationDetail", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementAttachment", b =>
                {
                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AnnouncementId")
                        .HasName("PK_posting_Announcement_Attachment");

                    b.ToTable("Announcement_Attachment", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementBaubleType", b =>
                {
                    b.Property<int>("AnnouncementBaubleTypeId")
                        .HasColumnType("int");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementBaubleTypeId");

                    b.ToTable("AnnouncementBaubleType", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementDecorationType", b =>
                {
                    b.Property<int>("AnnouncementDecorationTypeId")
                        .HasColumnType("int");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementDecorationTypeId");

                    b.ToTable("AnnouncementDecorationType", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementDistributionChannel", b =>
                {
                    b.Property<long>("AnnouncementDistributionChannelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementDistributionChannelId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<int>("AnnouncementListingSectionId")
                        .HasColumnType("int");

                    b.Property<int?>("AnnouncementModuleId")
                        .HasColumnType("int");

                    b.Property<int?>("BaubleTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DeadlineDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DetailsDistributionChannelId")
                        .HasColumnType("int");

                    b.Property<int>("DistributionChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("FrameTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExpired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFacebookShareOn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreview")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithFrame")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithLogo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithNewYearBauble")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithNewYearDecoration")
                        .HasColumnType("bit");

                    b.Property<int?>("NewYearDecorationTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PriorityActivationDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("PriorityDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PriorityExpireDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PriorityUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("RenewalDate")
                        .HasColumnType("datetime");

                    b.HasKey("AnnouncementDistributionChannelId")
                        .HasName("PK_posting_Announcement_DistributionChannel");

                    b.ToTable("Announcement_DistributionChannel", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementDrivingLicence", b =>
                {
                    b.Property<long>("AnnouncementDrivingLicenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementDrivingLicenceId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<long>("DrivingLicenceId")
                        .HasColumnType("bigint");

                    b.HasKey("AnnouncementDrivingLicenceId")
                        .HasName("PK_posting_Announcement_DrivingLicense");

                    b.ToTable("Announcement_DrivingLicence", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementFeed", b =>
                {
                    b.Property<long>("AnnouncementFeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementFeedId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("FilterObject")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<bool>("HasModeration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("AnnouncementFeedId");

                    b.ToTable("AnnouncementFeed", "feeds");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementFeedMatch", b =>
                {
                    b.Property<long>("AnnouncementFeedMatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementFeedMatchId"));

                    b.Property<long>("AnnouncementFeedId")
                        .HasColumnType("bigint");

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementFeedMatchId");

                    b.ToTable("AnnouncementFeedMatch", "feeds");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementFeedMatchStatus", b =>
                {
                    b.Property<int>("AnnouncementFeedMatchStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementFeedMatchStatusId")
                        .HasName("PK__Announce__61585BE7EF5A7716");

                    b.ToTable("AnnouncementFeedMatchStatus", "feeds");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementFrameType", b =>
                {
                    b.Property<int>("AnnouncementFrameTypeId")
                        .HasColumnType("int");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementFrameTypeId");

                    b.ToTable("AnnouncementFrameType", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementJobseekerApplication", b =>
                {
                    b.Property<long>("AnnouncementJobseekerApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementJobseekerApplicationId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastViewDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementJobseekerApplicationId")
                        .HasName("PK_posting_AnnouncementJobseekerApplication");

                    b.ToTable("AnnouncementJobseekerApplication", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementLanguage", b =>
                {
                    b.Property<long>("AnnouncementLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementLanguageId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMandatory")
                        .HasColumnType("bit");

                    b.Property<long>("WorldLanguageId")
                        .HasColumnType("bigint");

                    b.HasKey("AnnouncementLanguageId")
                        .HasName("PK_posting_Announcement_Language");

                    b.ToTable("Announcement_Language", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementListingSection", b =>
                {
                    b.Property<int>("AnnouncementListingSectionId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementListingSectionId");

                    b.ToTable("AnnouncementListingSection", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementLocality", b =>
                {
                    b.Property<long>("AnnouncementLocalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementLocalityId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<int?>("LocalityId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementLocalityId")
                        .HasName("PK_posting_Announcement_Locality");

                    b.ToTable("Announcement_Locality", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementLocation", b =>
                {
                    b.Property<long>("AnnouncementLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementLocationId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerLocationId")
                        .HasColumnType("bigint");

                    b.HasKey("AnnouncementLocationId")
                        .HasName("PK_posting_Announcement_Location");

                    b.ToTable("Announcement_Location", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementLogo", b =>
                {
                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<string>("LogoFilename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoThumbnail1Filename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AnnouncementId")
                        .HasName("PK_posting_Announcement_Logo");

                    b.ToTable("Announcement_Logo", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementMatchingJobseeker", b =>
                {
                    b.Property<long>("AnnouncementMatchingJobseekerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementMatchingJobseekerId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AnnouncementMatchingListId")
                        .HasColumnType("bigint");

                    b.Property<double>("BestAggregatedCategoryFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("BestAggregatedHeadCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("BestAggregatedSubCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("BestCategoryFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("BestHeadCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("BestPositionAgePenalty")
                        .HasColumnType("float");

                    b.Property<double>("BestPositionFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("BestPositionKeywordScore")
                        .HasColumnType("float");

                    b.Property<double>("BestSubCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("CategoryFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("CurrentAggregatedCategoryFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("CurrentAggregatedHeadCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("CurrentAggregatedSubCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("CurrentCategoryFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("CurrentHeadCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("CurrentPositionFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("CurrentSubCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("DrivingLicenseFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("ExperienceFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("ExperienceHeadCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("ExperienceSubCategoryScore")
                        .HasColumnType("float");

                    b.Property<double>("FinalScore")
                        .HasColumnType("float");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<double>("LanguageFinalScore")
                        .HasColumnType("float");

                    b.Property<DateTime?>("LastStatusUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastStatusUpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<double>("LocationFinalScore")
                        .HasColumnType("float");

                    b.Property<double>("MandatoryLanguageScore")
                        .HasColumnType("float");

                    b.Property<double>("OptionalLanguageScore")
                        .HasColumnType("float");

                    b.Property<double>("PositionFinalScore")
                        .HasColumnType("float");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementMatchingJobseekerId")
                        .HasName("PK__Announce__F34165ECFE14E96B");

                    b.ToTable("AnnouncementMatchingJobseeker", "matching");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementMatchingJobseekerStatus", b =>
                {
                    b.Property<int>("AnnouncementMatchingJobseekerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementMatchingJobseekerStatusId");

                    b.ToTable("AnnouncementMatchingJobseekerStatus", "matching");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementMatchingList", b =>
                {
                    b.Property<long>("AnnouncementMatchingListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementMatchingListId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApproveUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CvAccessDays")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CvAccessExpireDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("EmailMessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("GenerationStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAutoGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCvAccessActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPriority")
                        .HasColumnType("bit");

                    b.Property<long>("IsRegenerated")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastGenerationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastUpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PlannedSendDate")
                        .HasColumnType("datetime");

                    b.HasKey("AnnouncementMatchingListId");

                    b.ToTable("Announcement_MatchingList", "matching");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementMatchingListApprovalStatus", b =>
                {
                    b.Property<int>("AnnouncementMatchingListApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementMatchingListApprovalStatusId");

                    b.ToTable("AnnouncementMatchingListApprovalStatus", "matching");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementMatchingListGenerationStatus", b =>
                {
                    b.Property<int>("AnnouncementMatchingListGenerationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementMatchingListGenerationStatusId");

                    b.ToTable("AnnouncementMatchingListGenerationStatus", "matching");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementModule", b =>
                {
                    b.Property<int>("AnnouncementModuleId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AnnouncementModuleId")
                        .HasName("PK_posting_AnnouncementModule");

                    b.ToTable("AnnouncementModule", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementOccupationCategory", b =>
                {
                    b.Property<long>("AnnouncementOccupationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementOccupationCategoryId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<long>("OccupationCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("AnnouncementOccupationCategoryId")
                        .HasName("PK_posting_Announcement_OccupationCategory");

                    b.ToTable("Announcement_OccupationCategory", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementPublishStatus", b =>
                {
                    b.Property<int>("AnnouncementPublishStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("AnnouncementPublishStatusId");

                    b.ToTable("AnnouncementPublishStatus", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementRenewal", b =>
                {
                    b.Property<long>("AnnouncementRenewalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementRenewalId"));

                    b.Property<DateTime?>("ActualRenewalDate")
                        .HasColumnType("datetime");

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsInstant")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastUpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ScheduledRenewalDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementRenewalId");

                    b.ToTable("AnnouncementRenewal", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementRenewalStat", b =>
                {
                    b.Property<long>("AnnouncementRenewalStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementRenewalStatId"));

                    b.Property<long>("AnnouncementRenewalId")
                        .HasColumnType("bigint");

                    b.Property<int>("AnonymousViewCount")
                        .HasColumnType("int");

                    b.Property<int>("NonAnonymousViewCount")
                        .HasColumnType("int");

                    b.Property<int>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalViewCount")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementRenewalStatId");

                    b.ToTable("AnnouncementRenewal_Stat", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementSite", b =>
                {
                    b.Property<int>("AnnouncementSiteId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("AnnouncementSiteId")
                        .HasName("PK_posting_AnnouncementSite");

                    b.ToTable("AnnouncementSite", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementStat", b =>
                {
                    b.Property<long>("AnnouncementStatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("Announcement_StatId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AnnouncementStatId"));

                    b.Property<long>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<int>("AnonymousViewCount")
                        .HasColumnType("int");

                    b.Property<int>("NonAnonymousViewCount")
                        .HasColumnType("int");

                    b.Property<int>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<int?>("TotalViewCount")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementStatId");

                    b.ToTable("Announcement_Stat", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementStatus", b =>
                {
                    b.Property<int>("AnnouncementStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AnnouncementStatusId")
                        .HasName("PK_posting_AnnouncementStatus");

                    b.ToTable("AnnouncementStatus", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementType", b =>
                {
                    b.Property<int>("AnnouncementTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("AnnouncementTypeId")
                        .HasName("PK_posting_AnnouncementType");

                    b.ToTable("AnnouncementType", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementTypeSecondaryProductConstraint", b =>
                {
                    b.Property<int>("AnnouncementTypeSecondaryProductConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementTypeSecondaryProductConstraintId"));

                    b.Property<int>("AnnouncementTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProviderSpecific")
                        .HasColumnType("bit");

                    b.Property<int?>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryProductId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("AnnouncementTypeSecondaryProductConstraintId");

                    b.ToTable("AnnouncementTypeSecondaryProductConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.AnnouncementWorkExperienceType", b =>
                {
                    b.Property<int>("AnnouncementWorkExperienceTypeId")
                        .HasColumnType("int");

                    b.Property<double>("IsActive")
                        .HasColumnType("float");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.HasKey("AnnouncementWorkExperienceTypeId");

                    b.ToTable("AnnouncementWorkExperienceType", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.ApplicationMethod", b =>
                {
                    b.Property<int>("ApplicationMethodId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ApplicationMethodId")
                        .HasName("PK_posting_ApplicationMethod");

                    b.ToTable("ApplicationMethod", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.ApplicationStatus", b =>
                {
                    b.Property<int>("ApplicationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ApplicationStatusId")
                        .HasName("PK_posting_AnnouncementApplicationStatus");

                    b.ToTable("ApplicationStatus", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BankId")
                        .HasName("PK_billing_Bank");

                    b.ToTable("Bank", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.Banner", b =>
                {
                    b.Property<int>("BannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerId"));

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeactivationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageFileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("IsOpenNewTab")
                        .HasColumnType("float");

                    b.Property<int?>("LastActivationUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastChangeUserId")
                        .HasColumnType("int");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TargetId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("BannerId");

                    b.ToTable("Banner", "ads");
                });

            modelBuilder.Entity("Database_Example_3.Models.BannerClickEvent", b =>
                {
                    b.Property<int>("BannerClickEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerClickEventId"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.HasKey("BannerClickEventId");

                    b.ToTable("BannerClickEvent", "ads");
                });

            modelBuilder.Entity("Database_Example_3.Models.BannerPosition", b =>
                {
                    b.Property<int>("BannerPositionId")
                        .HasColumnType("int");

                    b.Property<string>("DesktopHeight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DesktopWidth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("HeadBannerPositionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResponsiveHeight")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResponsiveWidth")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BannerPositionId");

                    b.ToTable("BannerPosition", "ads");
                });

            modelBuilder.Entity("Database_Example_3.Models.BannerStatus", b =>
                {
                    b.Property<int>("BannerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BannerStatusId");

                    b.ToTable("BannerStatus", "ads");
                });

            modelBuilder.Entity("Database_Example_3.Models.BannerTarget", b =>
                {
                    b.Property<int>("BannerTargetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BannerTargetId");

                    b.ToTable("BannerTarget", "ads");
                });

            modelBuilder.Entity("Database_Example_3.Models.BannerType", b =>
                {
                    b.Property<int>("BannerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BannerTypeId");

                    b.ToTable("BannerType", "ads");
                });

            modelBuilder.Entity("Database_Example_3.Models.BannerViewEvent", b =>
                {
                    b.Property<int>("BannerViewEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BannerViewEventId"));

                    b.Property<int>("BannerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.HasKey("BannerViewEventId");

                    b.ToTable("BannerViewEvent", "ads");
                });

            modelBuilder.Entity("Database_Example_3.Models.BasePlacementSectionSecondaryProductConstraint", b =>
                {
                    b.Property<int>("BasePlacementSectionSecondaryProductConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasePlacementSectionSecondaryProductConstraintId"));

                    b.Property<int>("BasePlacementSectionId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProviderSpecific")
                        .HasColumnType("bit");

                    b.Property<int?>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<int?>("SecondaryProductId")
                        .HasColumnType("int");

                    b.Property<int>("SecondaryProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("BasePlacementSectionSecondaryProductConstraintId");

                    b.ToTable("BasePlacementSectionSecondaryProductConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.BoothType", b =>
                {
                    b.Property<int>("BoothTypeId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BoothTypeId");

                    b.ToTable("BoothType", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.BrandingAnnouncementTileType", b =>
                {
                    b.Property<int>("BrandingAnnouncementTileTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BrandingAnnouncementTileTypeId");

                    b.ToTable("BrandingAnnouncementTileType", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.Content", b =>
                {
                    b.Property<long>("ContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContentId"));

                    b.Property<int>("ContentActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("CurrentValueBool")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CurrentValueDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("CurrentValueFloat")
                        .HasColumnType("float");

                    b.Property<long?>("CurrentValueInteger")
                        .HasColumnType("bigint");

                    b.Property<string>("CurrentValueString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EntityAttributeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDirectEntityReference")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsOverridden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("ModerationId")
                        .HasColumnType("int");

                    b.Property<bool?>("NewValueBool")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("NewValueDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("NewValueFloat")
                        .HasColumnType("float");

                    b.Property<long?>("NewValueHashCode")
                        .HasColumnType("bigint");

                    b.Property<long?>("NewValueInteger")
                        .HasColumnType("bigint");

                    b.Property<string>("NewValueString")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint");

                    b.HasKey("ContentId")
                        .HasName("PK_mod_Content");

                    b.HasIndex(new[] { "EntityAttributeId" }, "IX_Content_EntityAttributeId");

                    b.HasIndex(new[] { "RequestId" }, "IX_Content_RequestId");

                    b.HasIndex(new[] { "IsProcessed" }, "IX_mod_Content_IsProcessed_inc_RequestId");

                    b.ToTable("Content", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.ContentAction", b =>
                {
                    b.Property<int>("ContentActionId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ContentActionId")
                        .HasName("PK_mod_ContentAction");

                    b.ToTable("ContentAction", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Alpha2Code")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Alpha3Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .IsUnicode(false)
                        .HasColumnType("char(3)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("NumericCode")
                        .HasColumnType("smallint");

                    b.HasKey("CountryId")
                        .HasName("PK_common_Country");

                    b.ToTable("Country", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.Customer", b =>
                {
                    b.Property<long>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerStatusId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasFeeds")
                        .HasColumnType("bit");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("InactiveUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("IndustryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<long>("InsertUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAutomaticEmailSendDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LegacyContactInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LegalAddress")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LegalAddress2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LegalName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("LocalityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("Name2")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("NextDebtRemindDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("NumberOfEmployeesFrom")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfEmployeesTo")
                        .HasColumnType("int");

                    b.Property<string>("Postcode")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PublicEmail")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("UpdateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("VerificationExpireDate")
                        .HasColumnType("datetime");

                    b.Property<string>("VideoUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Website")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CustomerId")
                        .HasName("PK_client_Customer");

                    b.HasIndex(new[] { "IdNumber" }, "Customer_IdNumber_Unique")
                        .IsUnique();

                    b.ToTable("Customer", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerAgent", b =>
                {
                    b.Property<long>("CustomerAgentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerAgentId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CustomerAgentStatusId")
                        .HasColumnType("int");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsProfileOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVirtualAdminAgent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LastChangeUserId")
                        .HasColumnType("int");

                    b.Property<string>("MobilePhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MobilePhoneNumber2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone1Extension")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Phone1Number")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Position")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Surname")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerAgentId")
                        .HasName("PK_client_CustomerAgent");

                    b.HasIndex(new[] { "UserId" }, "IX_client_CustomerAgent_UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("CustomerAgent", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerAgentStatus", b =>
                {
                    b.Property<int>("CustomerAgentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerAgentStatusId")
                        .HasName("PK_client_CustomerAgentStatus");

                    b.ToTable("CustomerAgentStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerAutomaticEmail", b =>
                {
                    b.Property<long>("CustomerAutomaticEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerAutomaticEmailId"));

                    b.Property<long>("CustomerAgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerAutomaticEmailId");

                    b.ToTable("CustomerAutomaticEmail", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerAutomaticSm", b =>
                {
                    b.Property<long>("CustomerAutomaticSmsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerAutomaticSmsId"));

                    b.Property<string>("ContentInfo")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<long>("CustomerAgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<long>("SmsMessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("SmsTypeId")
                        .HasColumnType("int");

                    b.HasKey("CustomerAutomaticSmsId");

                    b.ToTable("CustomerAutomaticSms", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerBranding", b =>
                {
                    b.Property<long>("CustomerBrandingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerBrandingId"));

                    b.Property<string>("AnnouncementDetailsBgColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AnnouncementDetailsDesktopBgImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("AnnouncementDetailsDisplayCvBox")
                        .HasColumnType("bit");

                    b.Property<bool?>("AnnouncementDetailsDisplayOtherAnnouncements")
                        .HasColumnType("bit");

                    b.Property<string>("AnnouncementDetailsMobileBgImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AnnouncementTileColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BrandingAnnouncementTileTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CustomerCoverImage")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CustomerDetailsBgColor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAnnouncementDetailsBackgroundColorCustomizable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsAnnouncementDetailsCoverPhotoCustomizable")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCustomerDetailsBackgroundColorCustomizable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerBrandingId");

                    b.ToTable("CustomerBranding", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerBrandingAccessToken", b =>
                {
                    b.Property<long>("CustomerBrandingAccessTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerBrandingAccessTokenId"));

                    b.Property<bool>("AnnouncementDetailsDisplayCvBox")
                        .HasColumnType("bit");

                    b.Property<bool>("AnnouncementDetailsDisplayOtherAnnouncements")
                        .HasColumnType("bit");

                    b.Property<int>("BrandingAnnouncementTileTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerBrandingId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsAnnouncementDetailsBackgroundColorCustomizable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnnouncementDetailsCoverPhotoCustomizable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCustomerDetailsBackgroundColorCustomizable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProcessUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestCustomerAgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("TerminateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TokenExpireDate")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerBrandingAccessTokenId");

                    b.ToTable("CustomerBrandingAccessToken", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerBrandingAccessTokenStatus", b =>
                {
                    b.Property<int>("CustomerBrandingAccessTokenStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerBrandingAccessTokenStatusId");

                    b.ToTable("CustomerBrandingAccessTokenStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerBrandingType", b =>
                {
                    b.Property<int>("CustomerBrandingTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerBrandingTypeId");

                    b.ToTable("CustomerBrandingType", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerContract", b =>
                {
                    b.Property<long>("CustomerContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerContractId"));

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("date");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("date");

                    b.Property<string>("FileName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("CustomerContractId");

                    b.ToTable("CustomerContract", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerContractType", b =>
                {
                    b.Property<int>("CustomerContractTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerContractTypeId");

                    b.ToTable("CustomerContractType", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerGroup", b =>
                {
                    b.Property<long>("CustomerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerGroupId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("GroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CustomerGroupId");

                    b.ToTable("Customer_Group", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerGroup1", b =>
                {
                    b.Property<int>("CustomerGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerGroupId");

                    b.ToTable("CustomerGroup", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerIgnoredCustomer", b =>
                {
                    b.Property<long>("CustomerIgnoredCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerIgnoredCustomerId"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("IgnoredCustomerId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerIgnoredCustomerId");

                    b.ToTable("Customer_IgnoredCustomer", "feeds");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerJobseekerView", b =>
                {
                    b.Property<long>("CustomerJobseekerViewId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerJobseekerViewId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastViewDate")
                        .HasColumnType("datetime");

                    b.HasKey("CustomerJobseekerViewId")
                        .HasName("PK_client_CustomerJobseekerView");

                    b.ToTable("CustomerJobseekerView", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerJobseekerViewEvent", b =>
                {
                    b.Property<long>("JobseekerViewEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerViewEventId"));

                    b.Property<long?>("AnnouncementId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerAgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CvBoxAccessTokenId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CvDatabaseAccessTokenId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EventDate")
                        .HasColumnType("datetime");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MatchingId")
                        .HasColumnType("bigint");

                    b.Property<int>("SourceId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("JobseekerViewEventId");

                    b.ToTable("CustomerJobseekerViewEvent", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerJobseekerViewEventSource", b =>
                {
                    b.Property<int>("CustomerJobseekerViewEventSourceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerJobseekerViewEventSourceId");

                    b.ToTable("CustomerJobseekerViewEventSource", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerLocation", b =>
                {
                    b.Property<long>("CustomerLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerLocationId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("CityLocalityId")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric(18, 0)");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("CustomerLocationId")
                        .HasName("PK_client_CustomerLocation");

                    b.ToTable("CustomerLocation", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerLogo", b =>
                {
                    b.Property<long>("CustomerLogoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerLogoId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsUpdatingRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LogoFilename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LogoThumbnail1Filename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CustomerLogoId")
                        .HasName("PK_client_CustomerLogo");

                    b.ToTable("CustomerLogo", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerSavedJobseeker", b =>
                {
                    b.Property<long>("CustomerSavedJobseekerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerSavedJobseekerId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerSavedJobseekerFolderId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.HasKey("CustomerSavedJobseekerId")
                        .HasName("PK_client_CustomerSavedJobseeker");

                    b.ToTable("CustomerSavedJobseeker", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerSavedJobseekerFolder", b =>
                {
                    b.Property<long>("CustomerSavedJobseekerFolderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CustomerSavedJobseekerFolderId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("CustomerSavedJobseekerFolderId")
                        .HasName("PK_client_CustomerSavedJobseekerFolder");

                    b.ToTable("CustomerSavedJobseekerFolder", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerStatus", b =>
                {
                    b.Property<int>("CustomerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CustomerStatusId")
                        .HasName("PK_client_CustomerStatus");

                    b.ToTable("CustomerStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerType", b =>
                {
                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CustomerTypeId")
                        .HasName("PK_client_CustomerType");

                    b.ToTable("CustomerType", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerTypeBasePlacementSectionConstraint", b =>
                {
                    b.Property<int>("CustomerTypeBasePlacementSectionConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerTypeBasePlacementSectionConstraintId"));

                    b.Property<int>("BasePlacementSectionId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProviderSpecific")
                        .HasColumnType("bit");

                    b.Property<int?>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.HasKey("CustomerTypeBasePlacementSectionConstraintId");

                    b.ToTable("CustomerTypeBasePlacementSectionConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.CustomerTypeProductConstraint", b =>
                {
                    b.Property<int>("CustomerTypeProductConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerTypeProductConstraintId"));

                    b.Property<int>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDenied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProviderSpecific")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.HasKey("CustomerTypeProductConstraintId");

                    b.ToTable("CustomerTypeProductConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvBox", b =>
                {
                    b.Property<long>("CvBoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CvBoxId"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("CvBoxId");

                    b.ToTable("CvBox", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvBoxAccessToken", b =>
                {
                    b.Property<long>("CvBoxAccessTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CvBoxAccessTokenId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CvBoxId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CvBoxPageSectionId")
                        .HasColumnType("int");

                    b.Property<int>("CvSendDayCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CvSendExpireDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CvViewDayCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CvViewExpireDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("DecorateInCustomerAnnouncements")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCvSendAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCvViewAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("PlaceInAnnouncementDetailsSliderSection")
                        .HasColumnType("bit");

                    b.Property<bool>("PlaceInCustomerProfileCvSection")
                        .HasColumnType("bit");

                    b.Property<bool>("PlaceInCvBoxPage")
                        .HasColumnType("bit");

                    b.Property<bool>("PlaceInFrontPageCvTopSection")
                        .HasColumnType("bit");

                    b.Property<bool>("PlaceInFrontPageSliderSection")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProcessUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestCustomerAgentId")
                        .HasColumnType("bigint");

                    b.Property<long>("RequestUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("TerminateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("TokenExpireDate")
                        .HasColumnType("datetime");

                    b.HasKey("CvBoxAccessTokenId");

                    b.ToTable("CvBoxAccessToken", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvBoxAccessTokenStatus", b =>
                {
                    b.Property<int>("CvBoxAccessTokenStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CvBoxAccessTokenStatusId");

                    b.ToTable("CvBoxAccessTokenStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvBoxItem", b =>
                {
                    b.Property<long>("CvBoxItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CvBoxItemId"));

                    b.Property<long>("CvBoxAccessTokenId")
                        .HasColumnType("bigint");

                    b.Property<long>("CvBoxId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("CvBoxItemId");

                    b.ToTable("CvBoxItem", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvBoxItemStatus", b =>
                {
                    b.Property<int>("CvBoxItemStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CvBoxItemStatusId");

                    b.ToTable("CvBoxItemStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvBoxPageSection", b =>
                {
                    b.Property<int>("CvBoxPageSectionId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CvBoxPageSectionId");

                    b.ToTable("CvBoxPageSection", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvDatabaseAccessProductGroup", b =>
                {
                    b.Property<int>("CvDatabaseAccessProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CvDatabaseAccessProductGroupId");

                    b.ToTable("CvDatabaseAccessProductGroup", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvDatabaseAccessProductGroup1", b =>
                {
                    b.Property<int>("CvDatabaseAccessProductGroupId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CvDatabaseAccessProductGroupId")
                        .HasName("PK__CvDataba__AAA55836271D75B9");

                    b.ToTable("CvDatabaseAccessProductGroup", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvDatabaseAccessToken", b =>
                {
                    b.Property<long>("CvDatabaseAccessTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CvDatabaseAccessTokenId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("CvDatabaseAccessTokenRequestId")
                        .HasColumnType("bigint");

                    b.Property<int>("CvDatabaseAccessTokenTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<int>("DemoViewCountLimit")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FullAccessDayCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FullAccessExpireDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProcessUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("TerminateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TotalViewCountLimit")
                        .HasColumnType("int");

                    b.Property<int>("ViewCount")
                        .HasColumnType("int");

                    b.HasKey("CvDatabaseAccessTokenId");

                    b.ToTable("CvDatabaseAccessToken", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvDatabaseAccessTokenCvDatabaseProvider", b =>
                {
                    b.Property<long>("CvDatabaseAccessTokenCvDatabaseProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CvDatabaseAccessTokenCvDatabaseProviderId"));

                    b.Property<long>("CvDatabaseAccessTokenId")
                        .HasColumnType("bigint");

                    b.Property<int>("CvDatabaseProviderId")
                        .HasColumnType("int");

                    b.HasKey("CvDatabaseAccessTokenCvDatabaseProviderId");

                    b.ToTable("CvDatabaseAccessToken_CvDatabaseProvider", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvDatabaseAccessTokenEvent", b =>
                {
                    b.Property<long>("CvDatabaseAccessTokenEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CvDatabaseAccessTokenEventId"));

                    b.Property<long>("CvDatabaseAccessTokenId")
                        .HasColumnType("bigint");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("CvDatabaseAccessTokenEventId");

                    b.ToTable("CvDatabaseAccessToken_Event", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvDatabaseAccessTokenRequest", b =>
                {
                    b.Property<long>("CvDatabaseAccessTokenRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CvDatabaseAccessTokenRequestId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProcessUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequestCustomerAgentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequestCustomerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RequestUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<long?>("TerminateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("TerminationDate")
                        .HasColumnType("datetime");

                    b.HasKey("CvDatabaseAccessTokenRequestId");

                    b.ToTable("CvDatabaseAccessTokenRequest", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvDatabaseAccessTokenRequestStatus", b =>
                {
                    b.Property<int>("CvDatabaseAccessTokenRequestStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CvDatabaseAccessTokenRequestStatusId");

                    b.ToTable("CvDatabaseAccessTokenRequestStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvDatabaseAccessTokenStatus", b =>
                {
                    b.Property<int>("CvDatabaseAccessTokenStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CvDatabaseAccessTokenStatusId");

                    b.ToTable("CvDatabaseAccessTokenStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.CvDatabaseAccessTokenType", b =>
                {
                    b.Property<int>("CvDatabaseAccessTokenTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CvDatabaseAccessTokenTypeId");

                    b.ToTable("CvDatabaseAccessTokenType", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.DataType", b =>
                {
                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("DataTypeId")
                        .HasName("PK_meta_DataType");

                    b.ToTable("DataType", "meta");
                });

            modelBuilder.Entity("Database_Example_3.Models.DeliveryFailure", b =>
                {
                    b.Property<int>("DeliveryFailureId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DeliveryFailureId")
                        .HasName("PK_messaging_DeliveryFailure");

                    b.ToTable("DeliveryFailure", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.DrivingLicence", b =>
                {
                    b.Property<int>("DrivingLicenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrivingLicenceId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("DrivingLicenceId")
                        .HasName("PK_common_DrivingLicence");

                    b.ToTable("DrivingLicence", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.EducationLevel", b =>
                {
                    b.Property<int>("EducationLevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationLevelId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.HasKey("EducationLevelId")
                        .HasName("PK_common_EducationLevel");

                    b.ToTable("EducationLevel", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.EducationalInstitution", b =>
                {
                    b.Property<int>("EducationalInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationalInstitutionId"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EducationalInstitutionTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoFilename")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("NameLatin")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("EducationalInstitutionId")
                        .HasName("PK_EducationlInstitution");

                    b.ToTable("EducationalInstitution", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.EducationalInstitutionType", b =>
                {
                    b.Property<int>("EducationalInstitutionTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("EducationalInstitutionTypeId")
                        .HasName("PK_common_EducatioalInstitutionType");

                    b.ToTable("EducationalInstitutionType", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.EducationalProgram", b =>
                {
                    b.Property<int>("EducationalProgramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EducationalProgramId"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<string>("EducationalInstitutionCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EducationalInstitutionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("NameLatin")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("NameShort")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("EducationalProgramId");

                    b.ToTable("EducationalProgram", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.EmailAttachment", b =>
                {
                    b.Property<long>("EmailAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmailAttachmentId"));

                    b.Property<string>("AttachmentFileId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("EmailMessageId")
                        .HasColumnType("bigint");

                    b.HasKey("EmailAttachmentId");

                    b.HasIndex(new[] { "EmailMessageId" }, "IX_EmailAttachment_EmailMessageId");

                    b.ToTable("EmailAttachment", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.EmailContent", b =>
                {
                    b.Property<int>("EmailContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmailContentId"));

                    b.Property<string>("ContentBody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.HasKey("EmailContentId")
                        .HasName("PK_messaging_EmailContent");

                    b.ToTable("EmailContent", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.EmailMessage", b =>
                {
                    b.Property<long>("EmailMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmailMessageId"));

                    b.Property<string>("Bccaddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("BCCAddress");

                    b.Property<string>("Ccaddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("CCAddress");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DeliveryAttemptCount")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryFailureId")
                        .HasColumnType("int");

                    b.Property<long?>("EmailContentId")
                        .HasColumnType("bigint");

                    b.Property<int>("EmailStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FromTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsTemporary")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PlannedSendDate")
                        .HasColumnType("datetime");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Tags")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("TemplatKeyName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ToAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("EmailMessageId")
                        .HasName("PK_messaging_EmailMessage");

                    b.HasIndex(new[] { "EmailStatusId" }, "IX_EmailMessage_EmailStatusId");

                    b.HasIndex(new[] { "EmailStatusId", "IsDeleted", "PlannedSendDate" }, "IX_EmailMessage_EmailStatusId_IsDeleted_PlannedSendDate");

                    b.ToTable("EmailMessage", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.EmailMessageRecipient", b =>
                {
                    b.Property<long>("EmailMessageRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EmailMessageRecipientId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long>("EmailMessageId")
                        .HasColumnType("bigint");

                    b.Property<int>("EmailMessageRecipientTypeId")
                        .HasColumnType("int");

                    b.HasKey("EmailMessageRecipientId");

                    b.HasIndex(new[] { "EmailMessageId" }, "IX_EmailMessageRecipient_EmailMessageId");

                    b.ToTable("EmailMessageRecipient", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.EmailMessageRecipientType", b =>
                {
                    b.Property<int>("EmailMessageRecipientTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.HasKey("EmailMessageRecipientTypeId")
                        .HasName("PK_EmailMessageRecipientTypeId");

                    b.ToTable("EmailMessageRecipientType", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.EmailStatus", b =>
                {
                    b.Property<int>("EmailStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmailStatusId")
                        .HasName("PK_messaging_EmailStatus");

                    b.ToTable("EmailStatus", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.EmailType", b =>
                {
                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSwitchable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSwitchableByClient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmailTypeId");

                    b.ToTable("EmailType", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.EmploymentForm", b =>
                {
                    b.Property<int>("EmploymentFormId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmploymentFormId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("EmploymentFormId")
                        .HasName("PK_common_EmploymentForm");

                    b.ToTable("EmploymentForm", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.Entity", b =>
                {
                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.HasKey("EntityTypeId", "EntityId")
                        .HasName("PK_indexing_Entity");

                    b.HasIndex(new[] { "EntityTypeId" }, "IX_indexing_Entity_EntityTypeId");

                    b.ToTable("Entity", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.EntityAttribute", b =>
                {
                    b.Property<string>("EntityAttributeId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("EntityAttributeId")
                        .HasName("PK_indexing_EntityAttribute");

                    b.ToTable("EntityAttribute", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.EntityAttribute1", b =>
                {
                    b.Property<int>("EntityAttributeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EntityAttributeBundleId")
                        .HasColumnType("int");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsComplex")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystemSpecific")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnique")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValueReference")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("ValueEntityObjectId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<int?>("ValueEntityTypeId")
                        .HasColumnType("int");

                    b.HasKey("EntityAttributeId")
                        .HasName("PK_mod_EntityAttribute");

                    b.ToTable("EntityAttribute", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.EntityAttributeBundle", b =>
                {
                    b.Property<int>("EntityAttributeBundleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int>("SensitivityLevel")
                        .HasColumnType("int");

                    b.HasKey("EntityAttributeBundleId")
                        .HasName("PK_mod_EntityAttributeBundle");

                    b.ToTable("EntityAttributeBundle", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.EntityIndexTag", b =>
                {
                    b.Property<long>("EntityIndexTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EntityIndexTagId"));

                    b.Property<string>("EntityAttributeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<long>("IndexTagId")
                        .HasColumnType("bigint");

                    b.HasKey("EntityIndexTagId")
                        .HasName("PK_indexing_EntityIndexTag");

                    b.HasIndex(new[] { "EntityAttributeId" }, "IX_EntityIndexTag_EntityAttributeId");

                    b.HasIndex(new[] { "EntityId" }, "IX_EntityIndexTag_EntityId");

                    b.HasIndex(new[] { "EntityTypeId" }, "IX_EntityIndexTag_EntityTypeId");

                    b.HasIndex(new[] { "EntityTypeId", "EntityAttributeId" }, "IX_EntityIndexTag_EntityTypeId_EntityAttributeId");

                    b.HasIndex(new[] { "IndexTagId" }, "IX_EntityIndexTag_IndexTagId");

                    b.ToTable("EntityIndexTag", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.EntityNameI18n", b =>
                {
                    b.Property<long>("I18nId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("I18nId"));

                    b.Property<int>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityObjectId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("EntityObjectName")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("I18nId")
                        .HasName("PK_common_EntityNameI18n");

                    b.HasIndex(new[] { "EntityObjectId", "EntityId", "LanguageId" }, "IX_common_EntityNameI18n_EntityObjectId_EntityId_LanguageId_unique")
                        .IsUnique();

                    b.ToTable("EntityNameI18n", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.EntityObject", b =>
                {
                    b.Property<string>("EntityObjectId")
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EntityObjectId")
                        .HasName("PK_meta_EntityObject");

                    b.ToTable("EntityObject", "meta");
                });

            modelBuilder.Entity("Database_Example_3.Models.EntityType", b =>
                {
                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EntityTypeId")
                        .HasName("PK_indexing_EntityType");

                    b.ToTable("EntityType", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.EntityType1", b =>
                {
                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("HeadEntityTypeId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("ParentEntityTypeId")
                        .HasColumnType("int");

                    b.HasKey("EntityTypeId")
                        .HasName("PK_mod_EntityType");

                    b.ToTable("EntityType", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.Event", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("EventSpaceId")
                        .HasColumnType("int");

                    b.HasKey("EventId")
                        .HasName("PK_mod_Event");

                    b.ToTable("Event", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.Event1", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("EventVenue")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal?>("EventVenueLatitude")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<decimal?>("EventVenueLongtitude")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("OnlineEventStartDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("OnlinelEventEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("OnsiteEventEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("OnsiteEventStartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("UrlShortName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Visitors")
                        .HasColumnType("int");

                    b.HasKey("EventId");

                    b.ToTable("Event", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.EventParticipant", b =>
                {
                    b.Property<int>("EventParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventParticipantId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("EventCvDatabaseAccessStatusId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("EventParticipationPackageId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime");

                    b.HasKey("EventParticipantId");

                    b.ToTable("EventParticipant", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.EventParticipationPackage", b =>
                {
                    b.Property<int>("EventParticipationPackageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventParticipationPackageId"));

                    b.Property<int>("BoothTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVideoAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("MaxAllowedNumber")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EventParticipationPackageId");

                    b.ToTable("EventParticipationPackage", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.EventPartnerEducationalInstitution", b =>
                {
                    b.Property<int>("EventPartnerEducationalInstitutionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventPartnerEducationalInstitutionId"));

                    b.Property<int>("EducationalInstitutionId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("EventPartnerEducationalInstitutionId");

                    b.ToTable("EventPartnerEducationalInstitution", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.EventSpace", b =>
                {
                    b.Property<int>("EventSpaceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("EventSpaceId")
                        .HasName("PK_mod_EventSpace");

                    b.ToTable("EventSpace", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.EventStatus", b =>
                {
                    b.Property<int>("EventStatusId")
                        .HasColumnType("int");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EventStatusId");

                    b.ToTable("EventStatus", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.EventVisitor", b =>
                {
                    b.Property<long>("EventVisitorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventVisitorId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.HasKey("EventVisitorId");

                    b.ToTable("EventVisitor", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<int?>("FeatureTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("FeatureId")
                        .HasName("PK_auth_Feature");

                    b.ToTable("Feature", "auth");
                });

            modelBuilder.Entity("Database_Example_3.Models.FeatureType", b =>
                {
                    b.Property<long>("FeatureTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("FeatureTypeId")
                        .HasName("PK_auth_FeatureType");

                    b.ToTable("FeatureType", "auth");
                });

            modelBuilder.Entity("Database_Example_3.Models.GeneratedDocumentTemplate", b =>
                {
                    b.Property<long>("GeneratedDocumentTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GeneratedDocumentTemplateId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("GeneratedDocumentTemplateId");

                    b.ToTable("GeneratedDocumentTemplate", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.GeneratedDocumentTemplateContent", b =>
                {
                    b.Property<long>("GeneratedDocumentTemplateContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GeneratedDocumentTemplateContentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Footer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("GeneratedDocumentTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Header")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.HasKey("GeneratedDocumentTemplateContentId");

                    b.ToTable("GeneratedDocumentTemplateContent", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.GeneratedDocumentType", b =>
                {
                    b.Property<int>("GeneratedDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("GeneratedDocumentTypeId");

                    b.ToTable("GeneratedDocumentType", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.Handle", b =>
                {
                    b.Property<long>("HandleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HandleId"));

                    b.Property<DateTime?>("BindDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("EntityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("HandleStatusId")
                        .HasColumnType("int");

                    b.Property<long?>("HeadHandleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LockDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LockUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MasterHandleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParentHandleId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("datetime");

                    b.HasKey("HandleId")
                        .HasName("PK_mod_Handle");

                    b.HasIndex(new[] { "EntityTypeId", "EntityId" }, "IX_Handle_EntityTypeId_EntityId");

                    b.HasIndex(new[] { "HeadHandleId" }, "IX_Handle_HeadHandleId");

                    b.HasIndex(new[] { "ParentHandleId" }, "IX_Handle_ParentHandleId");

                    b.ToTable("Handle", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.HandleStatus", b =>
                {
                    b.Property<int>("HandleStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("HandleStatusId")
                        .HasName("PK_mod_HandleStatus");

                    b.ToTable("HandleStatus", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.Holiday", b =>
                {
                    b.Property<long>("HolidayId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("HolidayId"));

                    b.Property<int>("Day")
                        .HasColumnType("int")
                        .HasColumnName("day");

                    b.Property<bool>("IsWeekend")
                        .HasColumnType("bit");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("HolidayId");

                    b.ToTable("Holiday", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.IndexTag", b =>
                {
                    b.Property<long>("IndexTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IndexTagId"));

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<int>("HashCode")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageId")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnType("date");

                    b.Property<long?>("ValueInteger")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueIntegerFrom")
                        .HasColumnType("bigint");

                    b.Property<long?>("ValueIntegerTo")
                        .HasColumnType("bigint");

                    b.Property<int?>("ValueLength")
                        .HasColumnType("int");

                    b.Property<string>("ValueString")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("IndexTagId")
                        .HasName("PK_indexing_IndexTag");

                    b.HasIndex(new[] { "HashCode" }, "IX_IndexTag");

                    b.HasIndex(new[] { "ValueBool" }, "IX_IndexTag_ValueBool");

                    b.HasIndex(new[] { "ValueDate" }, "IX_IndexTag_ValueDate");

                    b.HasIndex(new[] { "ValueInteger" }, "IX_IndexTag_ValueInteger");

                    b.HasIndex(new[] { "ValueString" }, "IX_IndexTag_ValueString");

                    b.ToTable("IndexTag", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.IndexTagMetric", b =>
                {
                    b.Property<long>("IndexTagMetricId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IndexTagMetricId"));

                    b.Property<long>("IndexTagId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsMajorTrait")
                        .HasColumnType("bit");

                    b.Property<double>("Metric")
                        .HasColumnType("float");

                    b.Property<string>("TagTrait")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("TraitLength")
                        .HasColumnType("int");

                    b.HasKey("IndexTagMetricId")
                        .HasName("PK_indexing_IndexTag_Metric");

                    b.HasIndex(new[] { "IndexTagId" }, "IX_IndexTagMetric_IndexTagId");

                    b.HasIndex(new[] { "IndexTagId" }, "IX_IndexTagMetric_IndexTagId_inc_Metric_TagTrait");

                    b.HasIndex(new[] { "TagTrait" }, "IX_IndexTagMetric_TagTrait");

                    b.HasIndex(new[] { "TagTrait" }, "IX_indexing_IndexTagMetric_TagTrait_inc_IndexTagId_Metric");

                    b.ToTable("IndexTag_Metric", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.IndexingStatus", b =>
                {
                    b.Property<int>("IndexingStatusId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IndexingStatusId")
                        .HasName("PK__Indexing__E0F5E788908546FC");

                    b.ToTable("IndexingStatus", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.Industry", b =>
                {
                    b.Property<int>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IndustryId"));

                    b.Property<int>("LookupStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IndustryId")
                        .HasName("PK_common_Industry");

                    b.ToTable("Industry", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.Invoice", b =>
                {
                    b.Property<long>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InvoiceId"));

                    b.Property<int>("AccountingStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApproveUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("InvoiceFileId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("InvoiceFileSendDate")
                        .HasColumnType("datetime");

                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInvoiceFileSent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMerged")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastStatusChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastStatusChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MergeTargetInvoiceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PayOffDate")
                        .HasColumnType("datetime");

                    b.Property<long>("PayerCustomerAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("SerialNumber")
                        .HasColumnType("bigint");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("Vatamount")
                        .HasColumnType("decimal(18, 4)")
                        .HasColumnName("VATAmount");

                    b.HasKey("InvoiceId");

                    b.ToTable("Invoice", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.InvoiceAccountingStatus", b =>
                {
                    b.Property<int>("InvoiceAccountingStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InvoiceAccountingStatusId");

                    b.ToTable("InvoiceAccountingStatus", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.InvoiceCoverage", b =>
                {
                    b.Property<long>("InvoiceCoverageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("InvoiceCoverageId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAmountEditDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastAmountEditUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentId")
                        .HasColumnType("bigint");

                    b.HasKey("InvoiceCoverageId");

                    b.ToTable("InvoiceCoverage", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.InvoiceStatus", b =>
                {
                    b.Property<int>("InvoiceStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("InvoiceStatusId")
                        .HasName("PK_billing_InvoiceStatus");

                    b.ToTable("InvoiceStatus", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.InvoiceType", b =>
                {
                    b.Property<int>("InvoiceTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("InvoiceTypeId")
                        .HasName("PK_billing_InvoiceType");

                    b.ToTable("InvoiceType", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<decimal?>("ListPrice")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<int>("SellerId")
                        .HasColumnType("int");

                    b.HasKey("ItemId")
                        .HasName("PK_store_Item");

                    b.ToTable("Item", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.Job", b =>
                {
                    b.Property<long>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobId"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<short>("Priority")
                        .HasColumnType("smallint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("JobId")
                        .HasName("PK_system_Job");

                    b.HasIndex(new[] { "Status" }, "IX_Job_Status");

                    b.ToTable("Job", "system");
                });

            modelBuilder.Entity("Database_Example_3.Models.Jobseeker", b =>
                {
                    b.Property<long>("JobseekerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("DailyDigestOn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DesiredSalary")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ExportedCvFileId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("InactiveDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IndexingStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<long>("InsertUserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsCurrentlyEmployed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalEmployee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVehicleOwner")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsWillingToWorkAbroad")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWorkExperienceFilled")
                        .HasColumnType("bit");

                    b.Property<int>("JobseekerPrivacyId")
                        .HasColumnType("int");

                    b.Property<int>("JobseekerProfileStateId")
                        .HasColumnType("int");

                    b.Property<int>("JobseekerStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastFlagUnflagInternalEmployeeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastFlagUnflagInternalEmployeeUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastProfileStateCheckDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("LocalityId")
                        .HasColumnType("int");

                    b.Property<int?>("MigratedFromOriginWebsiteId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OriginWebsiteId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PhoneNumber2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ProfileFillDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ReactivateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalWorkExperienceInMonths")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("JobseekerId")
                        .HasName("PK_client_Jobseeker");

                    b.HasIndex(new[] { "IndexingStatusId" }, "IX_Jobseeker_IndexingStatusId");

                    b.HasIndex(new[] { "UserId" }, "IX_Jobseeker_UserId")
                        .IsUnique();

                    b.ToTable("Jobseeker", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerAttachment", b =>
                {
                    b.Property<long>("JobseekerAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerAttachmentId"));

                    b.Property<long>("JobseekerDocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.HasKey("JobseekerAttachmentId")
                        .HasName("PK_client_Jobseeker_Attachment");

                    b.ToTable("Jobseeker_Attachment", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerDocument", b =>
                {
                    b.Property<long>("JobseekerDocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerDocumentId"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("JobseekerDocumentTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Label")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("JobseekerDocumentId")
                        .HasName("PK_client_Jobseeker_Document");

                    b.ToTable("Jobseeker_Document", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerDocumentContentPlainText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("JobseekerDocumentId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("MetaData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlainText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("JobseekerDocumentContentPlainText", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerDocumentType", b =>
                {
                    b.Property<int>("JobseekerDocumentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobseekerDocumentTypeId")
                        .HasName("PK_client_JobseekerDocumentType");

                    b.ToTable("JobseekerDocumentType", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerDrivingLicence", b =>
                {
                    b.Property<long>("JobseekerDrivingLicenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerDrivingLicenceId"));

                    b.Property<long>("DrivingLicenceId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.HasKey("JobseekerDrivingLicenceId")
                        .HasName("PK_client_Jobseeker_DrivingLicence");

                    b.HasIndex(new[] { "DrivingLicenceId" }, "IX_JobseekerDrivingLicense_DrivingLicenseId_inc_JobseekerId");

                    b.HasIndex(new[] { "JobseekerId", "DrivingLicenceId" }, "IX_JobseekerDrivingLicense_JobseekerId_DrivingLicenseId");

                    b.ToTable("Jobseeker_DrivingLicence", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerEducation", b =>
                {
                    b.Property<long>("JobseekerEducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerEducationId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DateFromMonth")
                        .HasColumnType("int");

                    b.Property<int>("DateFromYear")
                        .HasColumnType("int");

                    b.Property<int?>("DateToMonth")
                        .HasColumnType("int");

                    b.Property<int>("DateToYear")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EducationLevelId")
                        .HasColumnType("bigint");

                    b.Property<int?>("EducationalInstitutionId")
                        .HasColumnType("int");

                    b.Property<int?>("EducationalProgramId")
                        .HasColumnType("int");

                    b.Property<string>("EducationalProgramName")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("IgnoreDay")
                        .HasColumnType("bit");

                    b.Property<string>("Institution")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<bool?>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<long?>("JobseekerFileId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Specialization")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("JobseekerEducationId")
                        .HasName("PK_client_Jobseeker_Education");

                    b.HasIndex(new[] { "EducationLevelId" }, "IX_JobseekerEducation_EducationLevelId_inc_JobseekerId");

                    b.HasIndex(new[] { "JobseekerId", "EducationLevelId" }, "IX_JobseekerEducation_JobseekerId_EducationLevelId");

                    b.ToTable("Jobseeker_Education", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerFile", b =>
                {
                    b.Property<long>("JobseekerFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerFileId"));

                    b.Property<string>("ContentType")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.HasKey("JobseekerFileId")
                        .HasName("PK_client_Jobseeker_File");

                    b.ToTable("Jobseeker_File", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerIgnoredCustomer", b =>
                {
                    b.Property<long>("JobseekerIgnoredCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerIgnoredCustomerId"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.HasKey("JobseekerIgnoredCustomerId")
                        .HasName("PK_client_Jobseeker_IgnoredCustomer");

                    b.ToTable("Jobseeker_IgnoredCustomer", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerLanguage", b =>
                {
                    b.Property<long>("JobseekerLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerLanguageId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("JobseekerFileId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<long>("LanguageProficiencyLevelId")
                        .HasColumnType("bigint");

                    b.Property<long>("WorldLanguageId")
                        .HasColumnType("bigint");

                    b.HasKey("JobseekerLanguageId")
                        .HasName("PK_client_Jobseeker_Language");

                    b.HasIndex(new[] { "JobseekerId", "WorldLanguageId" }, "IX_JobseekerLanguage_JobseekerId_WorldLanguageId");

                    b.HasIndex(new[] { "WorldLanguageId" }, "IX_JobseekerLanguage_WorldLanguageId_inc_JobseekerId");

                    b.ToTable("Jobseeker_Language", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerLocalitySubscription", b =>
                {
                    b.Property<long>("JobseekerLocalitySubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerLocalitySubscriptionId"));

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<int>("LocalityId")
                        .HasColumnType("int");

                    b.HasKey("JobseekerLocalitySubscriptionId");

                    b.ToTable("Jobseeker_LocalitySubscription", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerOccupationCategorySubscription", b =>
                {
                    b.Property<long>("JobseekerOccupationCategorySubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerOccupationCategorySubscriptionId"));

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<long>("OccupationCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("JobseekerOccupationCategorySubscriptionId")
                        .HasName("PK_client_Jobseeker_OccupationCategorySubscription");

                    b.ToTable("Jobseeker_OccupationCategorySubscription", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerPhoto", b =>
                {
                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("JobseekerId")
                        .HasName("PK_client_jobseeker_Photo");

                    b.ToTable("Jobseeker_Photo", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerPrivacy", b =>
                {
                    b.Property<int>("JobseekerPrivacyId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobseekerPrivacyId")
                        .HasName("PK_client_JobseekerPrivacy");

                    b.ToTable("JobseekerPrivacy", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerProfileState", b =>
                {
                    b.Property<int>("JobseekerProfileStateId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobseekerProfileStateId")
                        .HasName("PK_client_JobseekerProfileState");

                    b.ToTable("JobseekerProfileState", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerStatus", b =>
                {
                    b.Property<int>("JobseekerStatusId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("JobseekerStatusId")
                        .HasName("PK_client_JobseekerStatus");

                    b.ToTable("JobseekerStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerSubscriptionUpdateHistory", b =>
                {
                    b.Property<long>("JobseekerSubscriptionUpdateHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerSubscriptionUpdateHistoryId"));

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("JobseekerSubscriptionUpdateHistoryId");

                    b.ToTable("JobseekerSubscriptionUpdateHistory", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerWorkExperience", b =>
                {
                    b.Property<long>("JobseekerWorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerWorkExperienceId"));

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DateFromMonth")
                        .HasColumnType("int");

                    b.Property<int>("DateFromYear")
                        .HasColumnType("int");

                    b.Property<int?>("DateToMonth")
                        .HasColumnType("int");

                    b.Property<int?>("DateToYear")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsLast")
                        .HasColumnType("bit");

                    b.Property<long?>("JobseekerFileId")
                        .HasColumnType("bigint");

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("JobseekerWorkExperienceId")
                        .HasName("PK_client_Jobseeker_WorkExperience");

                    b.HasIndex(new[] { "JobseekerId" }, "IX_JobseekerWorkExperience_JobseekerId");

                    b.ToTable("Jobseeker_WorkExperience", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.JobseekerWorkExperienceCategory", b =>
                {
                    b.Property<long>("JobseekerWorkExperienceCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("JobseekerWorkExperienceCategoryId"));

                    b.Property<long>("JobseekerWorkExperienceId")
                        .HasColumnType("bigint");

                    b.Property<int>("OccupationCategoryId")
                        .HasColumnType("int");

                    b.HasKey("JobseekerWorkExperienceCategoryId")
                        .HasName("PK_client_JobseekerWorkExperience_Category");

                    b.HasIndex(new[] { "OccupationCategoryId" }, "IX_jobseekerWorkExperienceCategory_OccupationCategoryId_inc_JobseekerWorkExperienceId");

                    b.ToTable("JobseekerWorkExperience_Category", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.Keyword", b =>
                {
                    b.Property<int>("KeywordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KeywordId"));

                    b.Property<string>("KeywordText")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("KeywordId")
                        .HasName("PK_indexing_Keyword");

                    b.ToTable("Keyword", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.Language", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LanguageId")
                        .HasName("PK_common_Language");

                    b.ToTable("Language", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.Language1", b =>
                {
                    b.Property<string>("LanguageId")
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasMaxLength(16)
                        .IsUnicode(false)
                        .HasColumnType("varchar(16)");

                    b.Property<bool>("IsEntryData")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUi")
                        .HasColumnType("bit")
                        .HasColumnName("IsUI");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ShortNativeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LanguageId")
                        .HasName("PK_ux_Language");

                    b.ToTable("Language", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.LanguageCharset", b =>
                {
                    b.Property<int>("LanguageCharsetId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("LanguageCharsetId");

                    b.ToTable("LanguageCharset", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.LanguageProficiencyLevel", b =>
                {
                    b.Property<int>("LanguageProficiencyLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.HasKey("LanguageProficiencyLevelId")
                        .HasName("PK_common_LanguageProficiencyLevel");

                    b.ToTable("LanguageProficiencyLevel", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.Locality", b =>
                {
                    b.Property<int>("LocalityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalityId"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<bool?>("IsCapital")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCity")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocalityId")
                        .HasName("PK_common_Locality");

                    b.ToTable("Locality", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.LogoStatus", b =>
                {
                    b.Property<int>("LogoStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("LogoStatusId")
                        .HasName("PK_common_LogoStatus");

                    b.ToTable("LogoStatus", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.LookupStatus", b =>
                {
                    b.Property<int>("LookupStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LookupStatusId")
                        .HasName("PK_common_LookupStatus");

                    b.ToTable("LookupStatus", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.MigratedRegistrantOccupationCategory", b =>
                {
                    b.Property<int>("MigratedRegistrantOccupationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("MigratedRegistrant_OccupationCategoryId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MigratedRegistrantOccupationCategoryId"));

                    b.Property<long>("JobseekerId")
                        .HasColumnType("bigint");

                    b.Property<int>("OccupationCategoryId")
                        .HasColumnType("int");

                    b.HasKey("MigratedRegistrantOccupationCategoryId")
                        .HasName("PK_MigratedRegistrant_OccupationCategory_1");

                    b.HasIndex(new[] { "JobseekerId", "OccupationCategoryId" }, "IX_MigratedRegistrantOccupationCategory_JobseekerId_OccupationCategoryId");

                    b.ToTable("MigratedRegistrant_OccupationCategory", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.Moderation", b =>
                {
                    b.Property<long>("ModerationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ModerationId"));

                    b.Property<long?>("ContentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<int>("ModerationStatusId")
                        .HasColumnType("int");

                    b.Property<long?>("RequestId")
                        .HasColumnType("bigint");

                    b.HasKey("ModerationId")
                        .HasName("PK_mod_Moderation");

                    b.ToTable("Moderation", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.ModerationContext", b =>
                {
                    b.Property<long>("ModerationContextId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ModerationContextId"));

                    b.Property<DateTime?>("BlockingChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExternalApproveMessages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExternalRejectMessages")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("HandleId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HasExternalApproveBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("HasExternalRejectBlock")
                        .HasColumnType("bit");

                    b.Property<bool>("HasPendingContent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsApproveBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDependency")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsParentBound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRejectBlocked")
                        .HasColumnType("bit");

                    b.Property<long?>("LockUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LockingChangeDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RequestActionId")
                        .HasColumnType("int");

                    b.HasKey("ModerationContextId")
                        .HasName("PK_mod_ModerationContext");

                    b.HasIndex(new[] { "HandleId" }, "IX_ModerationContext_HandleId");

                    b.ToTable("ModerationContext", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.ModerationStatus", b =>
                {
                    b.Property<long>("ModerationStatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ModerationStatusId")
                        .HasName("PK_mod_ModerationStatus");

                    b.ToTable("ModerationStatus", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.MonthlyPlan", b =>
                {
                    b.Property<long>("MonthlyPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MonthlyPlanId"));

                    b.Property<int>("Holidays")
                        .HasColumnType("int");

                    b.Property<decimal?>("Invoices")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("IsEditable")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<decimal?>("Payments")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long?>("PortfolioId")
                        .HasColumnType("bigint");

                    b.Property<int>("Saturdays")
                        .HasColumnType("int");

                    b.Property<int?>("SharesPlan")
                        .HasColumnType("int");

                    b.Property<int>("TotalDays")
                        .HasColumnType("int");

                    b.Property<int>("WorkingDays")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("MonthlyPlanId");

                    b.ToTable("MonthlyPlan", "sales");
                });

            modelBuilder.Entity("Database_Example_3.Models.MonthlyPlanItem", b =>
                {
                    b.Property<long>("MonthlyPlanItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MonthlyPlanItemId"));

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<long>("MonthlyPlanId")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("WebsiteId")
                        .HasColumnType("int");

                    b.HasKey("MonthlyPlanItemId");

                    b.ToTable("MonthlyPlanItem", "sales");
                });

            modelBuilder.Entity("Database_Example_3.Models.MonthlyPlanProductType", b =>
                {
                    b.Property<long>("MonthlyPlanProductTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("MonthlyPlanProductTypeId"));

                    b.Property<long>("MonthlyPlanId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SoldCount")
                        .HasColumnType("int");

                    b.Property<int?>("TotalCount")
                        .HasColumnType("int");

                    b.Property<int?>("WebsiteId")
                        .HasColumnType("int");

                    b.HasKey("MonthlyPlanProductTypeId");

                    b.ToTable("MonthlyPlanProductType", "sales");
                });

            modelBuilder.Entity("Database_Example_3.Models.Notification", b =>
                {
                    b.Property<long>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NotificationId"));

                    b.Property<DateTime?>("ActualProcessDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsLast")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("MaxProcessAttemptCount")
                        .HasColumnType("int");

                    b.Property<int>("ProcessAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledProcessDate")
                        .HasColumnType("datetime");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("SubTypeId")
                        .HasColumnType("int");

                    b.Property<long>("TargetEntityId")
                        .HasColumnType("bigint");

                    b.Property<int>("TargetEntityTypeId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification", "crm");
                });

            modelBuilder.Entity("Database_Example_3.Models.NotificationChannel", b =>
                {
                    b.Property<int>("NotificationChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("NotificationChannelId");

                    b.ToTable("NotificationChannel", "crm");
                });

            modelBuilder.Entity("Database_Example_3.Models.NotificationStatus", b =>
                {
                    b.Property<int>("NotificationStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("NotificationStatusId");

                    b.ToTable("NotificationStatus", "crm");
                });

            modelBuilder.Entity("Database_Example_3.Models.NotificationSubType", b =>
                {
                    b.Property<int>("NotificationSubTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.HasKey("NotificationSubTypeId");

                    b.ToTable("NotificationSubType", "crm");
                });

            modelBuilder.Entity("Database_Example_3.Models.NotificationTargetEntityType", b =>
                {
                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("NotificationTargetEntityTypeId")
                        .HasColumnType("int");

                    b.ToTable("NotificationTargetEntityType", "crm");
                });

            modelBuilder.Entity("Database_Example_3.Models.NotificationType", b =>
                {
                    b.Property<int>("NotificationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("NotificationTypeId");

                    b.ToTable("NotificationType", "crm");
                });

            modelBuilder.Entity("Database_Example_3.Models.ObjectHashCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("HashCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int")
                        .HasColumnName("ObjectID");

                    b.Property<short>("ObjectType")
                        .HasColumnType("smallint");

                    b.HasKey("Id")
                        .HasName("PK_system_EntityHashCode");

                    b.ToTable("ObjectHashCode", "system");
                });

            modelBuilder.Entity("Database_Example_3.Models.OccupationCategory", b =>
                {
                    b.Property<int>("OccupationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OccupationCategoryId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("HeadOccupationCategoryId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("OccupationCategoryId")
                        .HasName("PK_common_OccupationCategory");

                    b.ToTable("OccupationCategory", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.Order", b =>
                {
                    b.Property<long>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderId"));

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CancelUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<bool>("IsAutoGenerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverriden")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPartialShippingAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandalone")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<long?>("OriginalOrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OverrideOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PartialShippingDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProFormaInvoiceFileId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("RejectDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("RejectUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RootOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ShippingStatusId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.HasKey("OrderId")
                        .HasName("PK_store_Order");

                    b.ToTable("Order", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.OrderItem", b =>
                {
                    b.Property<long>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OrderItemId"));

                    b.Property<string>("Customization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("DetailId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsDetailPending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverridePending")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverriden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpgrade")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ItemNumber")
                        .HasColumnType("int");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OriginalOrderItemId")
                        .HasColumnType("bigint");

                    b.Property<long?>("OverrideOrderItemId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<int?>("UsedQuantityBeforeOverride")
                        .HasColumnType("int");

                    b.HasKey("OrderItemId")
                        .HasName("PK_store_Order_Item");

                    b.ToTable("Order_Item", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.OrderShippingStatus", b =>
                {
                    b.Property<int>("OrderShippingStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderShippingStatusId");

                    b.ToTable("OrderShippingStatus", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.OrderStatus", b =>
                {
                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("OrderStatusId");

                    b.ToTable("OrderStatus", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.Payment", b =>
                {
                    b.Property<long>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("AmountLeft")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastAmountEditDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastAmountEditUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("OriginalAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<long>("PayerAccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("PaymentChannelId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.PaymentChannel", b =>
                {
                    b.Property<int>("PaymentChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentChannelId")
                        .HasName("PK_billing_PaymentChannel");

                    b.ToTable("PaymentChannel", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.PaymentMethod", b =>
                {
                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("PaymentMethodId")
                        .HasName("PK_billing_PaymentMethod");

                    b.ToTable("PaymentMethod", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.PaymentStatus", b =>
                {
                    b.Property<int>("PaymentStatusId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActual")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentStatusId")
                        .HasName("PK_billing_PaymentStatus");

                    b.ToTable("PaymentStatus", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.PaymentType", b =>
                {
                    b.Property<int>("PaymentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PaymentTypeId")
                        .HasName("PK_billing_PaymentType");

                    b.ToTable("PaymentType", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.Portfolio", b =>
                {
                    b.Property<long>("PortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PortfolioId"));

                    b.Property<string>("Comment")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PortfolioId");

                    b.ToTable("Portfolio", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.PortfolioAccountManager", b =>
                {
                    b.Property<long>("PortfolioAccountManagerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PortfolioAccountManagerId"));

                    b.Property<long>("AccountManagerAdminId")
                        .HasColumnType("bigint");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<long>("IsCurrent")
                        .HasColumnType("bigint");

                    b.Property<long>("PortfolioId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("PortfolioAccountManagerId");

                    b.ToTable("Portfolio_AccountManager", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.PortfolioCustomer", b =>
                {
                    b.Property<long>("PortfolioCustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PortfolioCustomerId"));

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<long>("PortfolioId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("PortfolioCustomerId");

                    b.ToTable("Portfolio_Customer", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.PostingChannel", b =>
                {
                    b.Property<int>("PostingChannelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PostingChannelId");

                    b.ToTable("PostingChannel", "comments");
                });

            modelBuilder.Entity("Database_Example_3.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Code")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLegacy")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductId")
                        .HasName("PK_store_Product");

                    b.ToTable("Product", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductAspect", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ProductAspectId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int?>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("bit");

                    b.Property<string>("ValueComplex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("ValueFloat")
                        .HasColumnType("float");

                    b.Property<long?>("ValueInteger")
                        .HasColumnType("bigint");

                    b.Property<string>("ValueString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId", "ProductAspectId")
                        .HasName("PK_store_Product_Aspect");

                    b.ToTable("Product_Aspect", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductAspect1", b =>
                {
                    b.Property<string>("ProductAspectId")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<int>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsMulti")
                        .HasColumnType("bit");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductAspectId")
                        .HasName("PK_store_ProductAspect");

                    b.ToTable("ProductAspect", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductCombinationConstraint", b =>
                {
                    b.Property<int>("ProductCombinationConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductCombinationConstraintId"));

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("DependencyChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("DependencyProductGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("DependencyProductId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandalone")
                        .HasColumnType("bit");

                    b.Property<int>("MaxAllowedItemCountPerOrder")
                        .HasColumnType("int");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductCombinationConstraintId");

                    b.ToTable("ProductCombinationConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductGroup", b =>
                {
                    b.Property<int>("ProductGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductGroupId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ProductGroupId");

                    b.ToTable("ProductGroup", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductGroupProduct", b =>
                {
                    b.Property<int>("ProducGroupProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProducGroupProductId"));

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProducGroupProductId");

                    b.ToTable("ProductGroup_Product", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductIncompatibilityConstraint", b =>
                {
                    b.Property<int>("ProductIncompatibilityConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductIncompatibilityConstraintId"));

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("IncompatibleChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("IncompatibleProductGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("IncompatibleProductId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ProductGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductIncompatibilityConstraintId");

                    b.ToTable("ProductIncompatibilityConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductReplacementConstraint", b =>
                {
                    b.Property<int>("ProductReplacementConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductReplacementConstraintId"));

                    b.Property<int?>("ChannelId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ReplacementProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductReplacementConstraintId");

                    b.ToTable("ProductReplacementConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductType", b =>
                {
                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCore")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ProductTypeId")
                        .HasName("PK_store_ProductType");

                    b.ToTable("ProductType", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductTypeAvailabilityConstraint", b =>
                {
                    b.Property<int>("ProductTypeAvailabilityConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTypeAvailabilityConstraintId"));

                    b.Property<bool?>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<int>("ProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductTypeAvailabilityConstraintId");

                    b.ToTable("ProductTypeAvailabilityConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductTypeCombinationConstraint", b =>
                {
                    b.Property<int>("ProductTypeCombinationConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductTypeCombinationConstraintId"));

                    b.Property<int>("CoreProductTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<int>("SecondaryProductTypeId")
                        .HasColumnType("int");

                    b.HasKey("ProductTypeCombinationConstraintId");

                    b.ToTable("ProductTypeCombinationConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProductUpgradeConstraint", b =>
                {
                    b.Property<int>("ProductUpgradeConstraintId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductUpgradeConstraintId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAddDenied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpgradeDenied")
                        .HasColumnType("bit");

                    b.Property<int?>("NewProductChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("NewProductGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("NewProductId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalProductChannelId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalProductGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginalProductId")
                        .HasColumnType("int");

                    b.HasKey("ProductUpgradeConstraintId");

                    b.ToTable("ProductUpgradeConstraint", "constraints");
                });

            modelBuilder.Entity("Database_Example_3.Models.PromoEmailAttachment", b =>
                {
                    b.Property<long>("PromoEmailAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PromoEmailAttachmentId"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PromoEmailTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("PromoEmailAttachmentId");

                    b.ToTable("PromoEmailAttachment", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.PromoEmailPortfolio", b =>
                {
                    b.Property<long>("PromoEmailPortfolioId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PromoEmailPortfolioId"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PortfolioId")
                        .HasColumnType("bigint");

                    b.Property<long>("PromoEmailTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("PromoEmailPortfolioId");

                    b.ToTable("PromoEmail_Portfolio", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.PromoEmailStatus", b =>
                {
                    b.Property<int>("PromoEmailStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("PromoEmailStatusId");

                    b.ToTable("PromoEmailStatus", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.PromoEmailTemplate", b =>
                {
                    b.Property<long>("PromoEmailTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PromoEmailTemplateId"));

                    b.Property<DateTime?>("ApproveDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApproveUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSent")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("ValidTo")
                        .HasColumnType("datetime");

                    b.HasKey("PromoEmailTemplateId");

                    b.ToTable("PromoEmailTemplate", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProviderWebsite", b =>
                {
                    b.Property<int>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnnouncementProvider")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCategorized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCvBoxProvider")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCvProvider")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRegistrable")
                        .HasColumnType("bit");

                    b.Property<short?>("LaunchYear")
                        .HasColumnType("smallint");

                    b.Property<string>("LogoFileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ProviderWebsiteId")
                        .HasName("PK_system_ProviderWebsite");

                    b.ToTable("ProviderWebsite", "system");
                });

            modelBuilder.Entity("Database_Example_3.Models.ProviderWebsiteOccupationCategory", b =>
                {
                    b.Property<int>("ProviderWebsiteOccupationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProviderWebsiteOccupationCategoryId"));

                    b.Property<int>("OccupationCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.HasKey("ProviderWebsiteOccupationCategoryId");

                    b.ToTable("ProviderWebsite_OccupationCategory", "system");
                });

            modelBuilder.Entity("Database_Example_3.Models.Record", b =>
                {
                    b.Property<long>("RecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RecordId"));

                    b.Property<long>("ActionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Attribute")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<long>("EntityId")
                        .HasColumnType("bigint");

                    b.Property<string>("EntityObjectId")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("char(8)")
                        .IsFixedLength();

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("ValueFloat")
                        .HasColumnType("float");

                    b.Property<long?>("ValueInteger")
                        .HasColumnType("bigint");

                    b.Property<string>("ValueString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecordId")
                        .HasName("PK_audit_Record");

                    b.ToTable("Record", "audit");
                });

            modelBuilder.Entity("Database_Example_3.Models.Request", b =>
                {
                    b.Property<long>("RequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("RequestId"));

                    b.Property<int>("ConceptRequestActionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("EventId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FulfilDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("FulfilUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("HandleId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsContentOverridable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFulfilled")
                        .HasColumnType("bit");

                    b.Property<int?>("ModerationId")
                        .HasColumnType("int");

                    b.Property<int>("RequestActionId")
                        .HasColumnType("int");

                    b.HasKey("RequestId")
                        .HasName("PK_mod_Request");

                    b.HasIndex(new[] { "HandleId" }, "IX_Request_HandleId");

                    b.HasIndex(new[] { "IsFulfilled" }, "IX_Request_IsFulfilled");

                    b.ToTable("Request", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.RequestAction", b =>
                {
                    b.Property<int>("RequestActionId")
                        .HasColumnType("int");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("RequestActionId")
                        .HasName("PK_mod_RequestAction");

                    b.ToTable("RequestAction", "mod");
                });

            modelBuilder.Entity("Database_Example_3.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<bool>("IsProviderWebsiteSpecific")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("ResourceId")
                        .HasName("PK_ux_Resource");

                    b.HasIndex(new[] { "ResourceScopeId", "Name", "ProviderWebsiteId" }, "UN_ResourceScopeId_Name_ProviderWebsiteId")
                        .IsUnique()
                        .HasFilter("[ProviderWebsiteId] IS NOT NULL");

                    b.ToTable("Resource", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.ResourceI18n", b =>
                {
                    b.Property<int>("ResourceI18nId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceI18nId"));

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("ntext");

                    b.HasKey("ResourceI18nId")
                        .HasName("PK_ux_ResourceI18n");

                    b.ToTable("ResourceI18n", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.ResourceScope", b =>
                {
                    b.Property<int>("ResourceScopeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ResourceScopeId")
                        .HasName("PK_ux_ResourceScope");

                    b.ToTable("ResourceScope", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBasicRole")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("RoleId")
                        .HasName("PK_auth_Role");

                    b.ToTable("Role", "auth");
                });

            modelBuilder.Entity("Database_Example_3.Models.RoleFeature", b =>
                {
                    b.Property<int>("RoleFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleFeatureId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("RoleFeatureId")
                        .HasName("PK_auth_RoleFeature");

                    b.ToTable("RoleFeature", "auth");
                });

            modelBuilder.Entity("Database_Example_3.Models.SchemaVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Applied")
                        .HasColumnType("datetime");

                    b.Property<string>("ScriptName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id")
                        .HasName("PK_SchemaVersions_Id");

                    b.ToTable("SchemaVersions");
                });

            modelBuilder.Entity("Database_Example_3.Models.Seller", b =>
                {
                    b.Property<int>("SellerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SellerId"));

                    b.Property<bool>("IsHost")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WebsiteUrl")
                        .HasMaxLength(1000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1000)");

                    b.HasKey("SellerId")
                        .HasName("PK_store_Seller");

                    b.ToTable("Seller", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.Session", b =>
                {
                    b.Property<long>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SessionId"));

                    b.Property<DateTime?>("AbsoluteExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("AssociatedUserDetailId")
                        .HasColumnType("bigint");

                    b.Property<int?>("AssociatedUserTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpirationSetDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsUserDataRefreshRequired")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastAccessDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("SessionUid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("UserDetailId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.HasKey("SessionId")
                        .HasName("PK_auth_Session");

                    b.ToTable("Session", "auth");
                });

            modelBuilder.Entity("Database_Example_3.Models.Setting", b =>
                {
                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsProviderWebsiteSpecific")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValueItem")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MasterSettingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ParentSettingId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("SettingLevelId")
                        .HasColumnType("int");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("ValueFloat")
                        .HasColumnType("float");

                    b.Property<long?>("ValueInteger")
                        .HasColumnType("bigint");

                    b.Property<string>("ValueString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SettingId")
                        .HasName("PK_ux_Setting");

                    b.ToTable("Setting", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.SettingI18n", b =>
                {
                    b.Property<int>("SettingI18nId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SettingI18nId"));

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.HasKey("SettingI18nId")
                        .HasName("PK_ux_SettingI18n");

                    b.ToTable("SettingI18n", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.SettingLevel", b =>
                {
                    b.Property<int>("SettingLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("SettingLevelId")
                        .HasName("PK_ux_SettingLevel");

                    b.ToTable("SettingLevel", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.SliderBanner", b =>
                {
                    b.Property<long>("SliderBannerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SliderBannerId"));

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<int>("DayCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ProcessDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProcessUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<long>("RequestCustomerAgentId")
                        .HasColumnType("bigint");

                    b.Property<int>("SliderBannerStatusId")
                        .HasColumnType("int");

                    b.HasKey("SliderBannerId");

                    b.ToTable("SliderBanner", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.SliderBannerStatus", b =>
                {
                    b.Property<int>("SliderBannerStatus1")
                        .HasColumnType("int")
                        .HasColumnName("SliderBannerStatus");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SliderBannerStatus1");

                    b.ToTable("SliderBannerStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.SmsMessage", b =>
                {
                    b.Property<long>("SmsMessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SmsMessageId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MaxSendAttemptCount")
                        .HasColumnType("int");

                    b.Property<int>("SendAttemptCount")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("SmsMessageId");

                    b.ToTable("SmsMessage", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.SmsStatus", b =>
                {
                    b.Property<int>("SmsStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("SmsStatusId");

                    b.ToTable("SmsStatus", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.SmsStopReason", b =>
                {
                    b.Property<int>("SmsStopReasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SmsStopReasonId"));

                    b.Property<int>("SmsTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StopReasonId")
                        .HasColumnType("int");

                    b.HasKey("SmsStopReasonId");

                    b.ToTable("Sms_StopReason", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.SmsStopReason1", b =>
                {
                    b.Property<long>("SmsStopReasonId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("SmsStopReasonId");

                    b.ToTable("SmsStopReason", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.SmsTemplate", b =>
                {
                    b.Property<long>("SmsTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SmsTemplateId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .IsUnicode(false)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.HasKey("SmsTemplateId");

                    b.ToTable("SmsTemplate", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.SmsTemplateContent", b =>
                {
                    b.Property<long>("SmsTemplateContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SmsTemplateContentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("LanguageCharsetId")
                        .HasColumnType("int");

                    b.Property<long>("SmsTemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("SmsTemplateContentId");

                    b.ToTable("SmsTemplateContent", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.SmsType", b =>
                {
                    b.Property<int>("SmsTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsSwitchable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSwitchableByClient")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("SmsTypeId");

                    b.ToTable("SmsType", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.SpecialPriceOffer", b =>
                {
                    b.Property<long>("SpecialPriceOfferId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SpecialPriceOfferId"));

                    b.Property<int?>("CustomerGroupId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime");

                    b.HasKey("SpecialPriceOfferId");

                    b.ToTable("SpecialPriceOffer", "store");
                });

            modelBuilder.Entity("Database_Example_3.Models.StaticContent", b =>
                {
                    b.Property<int>("StaticContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaticContentId"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ContentResouceId")
                        .HasColumnType("int");

                    b.Property<int>("TitleResouceId")
                        .HasColumnType("int");

                    b.HasKey("StaticContentId")
                        .HasName("PK_ux_StaticContent");

                    b.ToTable("StaticContent", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.Subscriber", b =>
                {
                    b.Property<long>("SubscriberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubscriberId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("DailyDigestOn")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("EmailVerificationResendAttempts")
                        .HasColumnType("int");

                    b.Property<string>("EmailVerificationResendToken")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MigratedFromOriginWebsiteId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("OriginWebsiteId")
                        .HasColumnType("int");

                    b.Property<string>("SubscriberCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("SubscriberStatusId")
                        .HasColumnType("int");

                    b.HasKey("SubscriberId")
                        .HasName("PK_client_Subscriber");

                    b.ToTable("Subscriber", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.SubscriberLocalitySubscription", b =>
                {
                    b.Property<long>("SubscriberLocalitySubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubscriberLocalitySubscriptionId"));

                    b.Property<int>("LocalityId")
                        .HasColumnType("int");

                    b.Property<long>("SubscriberId")
                        .HasColumnType("bigint");

                    b.HasKey("SubscriberLocalitySubscriptionId");

                    b.ToTable("Subscriber_LocalitySubscription", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.SubscriberOccupationCategory", b =>
                {
                    b.Property<long>("SubscriberOccupationCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SubscriberOccupationCategoryId"));

                    b.Property<long>("OccupationCategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubscriberId")
                        .HasColumnType("bigint");

                    b.HasKey("SubscriberOccupationCategoryId")
                        .HasName("PK_client_Subscriber_OccupationCategory");

                    b.ToTable("Subscriber_OccupationCategory", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.SubscriberStatus", b =>
                {
                    b.Property<int>("SubscriberStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SubscriberStatusId")
                        .HasName("PK_client_SubscriberStatus");

                    b.ToTable("SubscriberStatus", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.SuspendedEmailAddress", b =>
                {
                    b.Property<long>("SuspendedEmailAddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SuspendedEmailAddressId"));

                    b.Property<string>("BounceSubType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BounceType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ComplaintType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("EmailDomain")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsDomain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSuspended")
                        .HasColumnType("bit");

                    b.Property<string>("SuspendType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("SuspendedEmailAddressId");

                    b.HasIndex(new[] { "EmailAddress", "IsSuspended", "IsDomain", "IsProcessed" }, "IX_SuspendedEmailAddress_EmailAddress_IsSuspended_IsDomain_IsProcessed");

                    b.ToTable("SuspendedEmailAddress", "client");
                });

            modelBuilder.Entity("Database_Example_3.Models.SystemConfig", b =>
                {
                    b.Property<int>("SystemConfigId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("DataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsProviderWebsiteSpecific")
                        .HasColumnType("bit");

                    b.Property<bool>("IsValueItem")
                        .HasColumnType("bit");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("MasterSystemConfigId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("ParentSystemConfigId")
                        .HasColumnType("int");

                    b.Property<int?>("ProviderWebsiteId")
                        .HasColumnType("int");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnType("datetime");

                    b.Property<double?>("ValueFloat")
                        .HasColumnType("float");

                    b.Property<long?>("ValueInteger")
                        .HasColumnType("bigint");

                    b.Property<string>("ValueObject")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ValueString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SystemConfigId")
                        .HasName("PK_common_SystemConfig");

                    b.HasIndex(new[] { "KeyName", "IsProviderWebsiteSpecific", "ProviderWebsiteId" }, "DataCompareKey_Unique");

                    b.ToTable("SystemConfig", "system");
                });

            modelBuilder.Entity("Database_Example_3.Models.TargetAudience", b =>
                {
                    b.Property<int>("TargetAudienceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("TargetAudienceId")
                        .HasName("PK_posting_TargetAudience");

                    b.ToTable("TargetAudience", "posting");
                });

            modelBuilder.Entity("Database_Example_3.Models.Template", b =>
                {
                    b.Property<long>("TemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TemplateId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<string>("EmaiTemplateGenerationPath")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("KeyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Subject")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TemplateId")
                        .HasName("PK_messaging_Template");

                    b.ToTable("Template", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.TemplateContent", b =>
                {
                    b.Property<long>("TemplateContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TemplateContentId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Subject")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint");

                    b.HasKey("TemplateContentId")
                        .HasName("PK_messaging_TemplateContent");

                    b.ToTable("TemplateContent", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.TermTag", b =>
                {
                    b.Property<int>("TermTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermTagId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("TermTagId")
                        .HasName("PK_indexing_TermTag");

                    b.ToTable("TermTag", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.TermTagRelation", b =>
                {
                    b.Property<int>("TermTagRelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TermTagRelationId"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RelatedTermTagId")
                        .HasColumnType("int");

                    b.Property<double>("RelationWeight")
                        .HasColumnType("float");

                    b.Property<int>("TermTagId")
                        .HasColumnType("int");

                    b.HasKey("TermTagRelationId")
                        .HasName("PK_indexing_TermTagRelation");

                    b.ToTable("TermTagRelation", "indexing");
                });

            modelBuilder.Entity("Database_Example_3.Models.Theme", b =>
                {
                    b.Property<int>("ThemeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ThemeId")
                        .HasName("PK_ux_Theme");

                    b.ToTable("Theme", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.Thread", b =>
                {
                    b.Property<long>("ThreadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ThreadId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsAlive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastPostDate")
                        .HasColumnType("datetime");

                    b.Property<long>("ThreadRelatedObjectId")
                        .HasColumnType("bigint");

                    b.Property<int>("ThreadRelatedObjectTypeId")
                        .HasColumnType("int");

                    b.Property<int>("ThreadTopicId")
                        .HasColumnType("int");

                    b.HasKey("ThreadId");

                    b.ToTable("Thread", "comments");
                });

            modelBuilder.Entity("Database_Example_3.Models.ThreadPost", b =>
                {
                    b.Property<long>("ThreadPostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ThreadPostId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("PostingChannelId")
                        .HasColumnType("int");

                    b.Property<long?>("ReplyToPostId")
                        .HasColumnType("bigint");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ThreadId")
                        .HasColumnType("bigint");

                    b.HasKey("ThreadPostId");

                    b.ToTable("ThreadPost", "comments");
                });

            modelBuilder.Entity("Database_Example_3.Models.ThreadRelatedObjectType", b =>
                {
                    b.Property<int>("ThreadRelatedObjectType1")
                        .HasColumnType("int")
                        .HasColumnName("ThreadRelatedObjectType");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ThreadRelatedObjectType1");

                    b.ToTable("ThreadRelatedObjectType", "comments");
                });

            modelBuilder.Entity("Database_Example_3.Models.ThreadTopic", b =>
                {
                    b.Property<int>("ThreadTopicId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ThreadTopicId");

                    b.ToTable("ThreadTopic", "comments");
                });

            modelBuilder.Entity("Database_Example_3.Models.TransactionApprovalStatus", b =>
                {
                    b.Property<int>("TransactionApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionApprovalStatusId");

                    b.ToTable("TransactionApprovalStatus", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.TransactionInvoice", b =>
                {
                    b.Property<long>("TransactionInvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionInvoiceId"));

                    b.Property<long>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TransactionRecordId")
                        .HasColumnType("bigint");

                    b.HasKey("TransactionInvoiceId");

                    b.ToTable("Transaction_Invoice", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.TransactionRecord", b =>
                {
                    b.Property<long>("TransactionRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TransactionRecordId"));

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CancelDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("CancelUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("ConfirmationEmailSendDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("FinalApproveDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("FinalApproveUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("InitialCompleteApproveDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("InitialCompleteApproveUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("InitialPartialApproveDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("InitialPartialApproveUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("InvoiceId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("InvoiceTotalAmount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<bool?>("IsConfirmationEmailSent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProFormaInvoiceSent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTaxFree")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastModifiedUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastOrderEditDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastOrderEditUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastOrderTotalAmountWithDiscountEditDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastOrderTotalAmountWithDiscountEditUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastPayerEditDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastPayerEditUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastSendProformaInvoiceFileId")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("OrderId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("OrderTotalAmount")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal>("OrderTotalAmountWithDiscount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<long>("OriginalOrderId")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginalPayerAccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("OriginalPaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("OriginalProFormaInvoiceFileId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long>("PayerAccountId")
                        .HasColumnType("bigint");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("ProFormaInvoiceFileId")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ProFormaInvoiceSendDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ProFormaInvoiceSendUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RejectDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("RejectUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ReverseDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReverseUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SalesCustomerPortfolioAccountManagerId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaxesTotalAmount")
                        .HasColumnType("decimal(18, 6)");

                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.HasKey("TransactionRecordId");

                    b.ToTable("TransactionRecord", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.TransactionStatus", b =>
                {
                    b.Property<int>("TransactionStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TransactionStatusId");

                    b.ToTable("TransactionStatus", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.UserAccount", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("DeleteUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmailVerificationResendAttempts")
                        .HasColumnType("int");

                    b.Property<string>("EmailVerificationResendToken")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmailVerified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPasswordChangeRequired")
                        .HasColumnType("bit");

                    b.Property<string>("LanguageId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastVisitDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("MigratedFromOriginWebsiteId")
                        .HasColumnType("int");

                    b.Property<int?>("OriginWebsiteId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserStatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK_common_User");

                    b.HasIndex(new[] { "Email" }, "IX_User_Email");

                    b.HasIndex(new[] { "Username" }, "IX_Username_CustomerAgent_Admin_Unique")
                        .IsUnique();

                    b.HasIndex(new[] { "Username", "OriginWebsiteId" }, "IX_Username_Jobseeker_Unique")
                        .IsUnique()
                        .HasFilter("[OriginWebsiteId] IS NOT NULL");

                    b.ToTable("UserAccount", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.UserFeature", b =>
                {
                    b.Property<int>("UserFeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserFeatureId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("FeatureId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserFeatureId")
                        .HasName("PK_auth_UserFeature");

                    b.ToTable("UserFeature", "auth");
                });

            modelBuilder.Entity("Database_Example_3.Models.UserPreference", b =>
                {
                    b.Property<int>("UserPreferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserPreferenceId"));

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("ValueBool")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("ValueDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ValueInteger")
                        .HasColumnType("bigint");

                    b.Property<string>("ValueString")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserPreferenceId")
                        .HasName("PK_ux_UserPreference");

                    b.ToTable("UserPreference", "ux");
                });

            modelBuilder.Entity("Database_Example_3.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserRoleId")
                        .HasName("PK_auth_UserRole");

                    b.ToTable("UserRole", "auth");
                });

            modelBuilder.Entity("Database_Example_3.Models.UserSmsLanguageCharset", b =>
                {
                    b.Property<long>("UserSmsLanguageCharsetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserSmsLanguageCharsetId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("LanguageCharsetId")
                        .HasColumnType("int");

                    b.Property<int>("SmsTypeId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserSmsLanguageCharsetId");

                    b.ToTable("UserSmsLanguageCharset", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.UserStatus", b =>
                {
                    b.Property<int>("UserStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserStatusId")
                        .HasName("PK_common_UserStatus");

                    b.ToTable("UserStatus", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.UserStoppedEmail", b =>
                {
                    b.Property<long>("UserStoppedEmailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserStoppedEmailId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("EmailTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserStoppedEmailId");

                    b.ToTable("UserStoppedEmail", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.UserStoppedSm", b =>
                {
                    b.Property<long>("UserStoppedSmsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("UserStoppedSmsId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("SmsTypeId")
                        .HasColumnType("int");

                    b.Property<int>("StopReasonId")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("UserStoppedSmsId");

                    b.ToTable("UserStoppedSms", "messaging");
                });

            modelBuilder.Entity("Database_Example_3.Models.UserType", b =>
                {
                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserTypeId")
                        .HasName("PK_common_UserType");

                    b.ToTable("UserType", "common");
                });

            modelBuilder.Entity("Database_Example_3.Models.Vatstatus", b =>
                {
                    b.Property<int>("VatstatusId")
                        .HasColumnType("int")
                        .HasColumnName("VATStatusId");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("VatstatusId")
                        .HasName("PK_billing_VATStatus");

                    b.ToTable("VATStatus", "billing");
                });

            modelBuilder.Entity("Database_Example_3.Models.WorldLanguage", b =>
                {
                    b.Property<int>("WorldLanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WorldLanguageId"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<long>("CreateUserId")
                        .HasColumnType("bigint");

                    b.Property<int>("IndexNumber")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastChangeDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("LastChangeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("WorldLanguageId")
                        .HasName("PK_common_WorldLanguage");

                    b.ToTable("WorldLanguage", "common");
                });
#pragma warning restore 612, 618
        }
    }
}
